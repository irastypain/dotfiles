" ==========================================
" .vimrc config file
" author: i.rastypain@gmail.com

" ==========================================
" Including plugins
"
call plug#begin('~/.vim/plugged')

  " General
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-git'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-surround'
  Plug 'janko-m/vim-test'
  Plug 'w0rp/ale'

  " Navigation and search
  Plug 'jlanzarotta/bufexplorer'
  Plug 'kien/ctrlp.vim'
  Plug 'jasoncodes/ctrlp-modified.vim'
  Plug 'dyng/ctrlsf.vim'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
  Plug 'easymotion/vim-easymotion'

  " Advanced
  Plug 'jiangmiao/auto-pairs'
  Plug 'xuyuanp/nerdtree-git-plugin'
  Plug 'vim-scripts/SyntaxRange'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'ConradIrwin/vim-bracketed-paste'
  Plug 'airblade/vim-gitgutter'

  " Color schemes
  Plug 'morhetz/gruvbox'

  " Languages
  "
  " Ruby, Rails
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-rails'
  Plug 'vim-ruby/vim-ruby'
  Plug 'sunaku/vim-ruby-minitest'
  Plug 'thoughtbot/vim-rspec'
  Plug 'tpope/vim-rvm'
  Plug 'p0deje/vim-ruby-interpolation'
  "
  " Common
  Plug 'tpope/vim-markdown'
  Plug 'slim-template/vim-slim'
  Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

call plug#end()

" ==========================================
" Support russian layout in command mode
"
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

" ==========================================
" <leader>
"
let mapleader=","

" ==========================================
" Color scheme
"
colorscheme gruvbox

" ==========================================
" General options
"
set background=dark
set clipboard=unnamed
set cursorline
set expandtab
set hidden
set hlsearch
set ignorecase
set lazyredraw
set nobackup
set noswapfile
set nowrap
set number
set shiftwidth=2
set smartcase
set splitbelow
set splitright
set t_Co=256
set tabstop=2

" ==========================================
" Plugins
"
" ALE
let g:ale_set_highlights = 0
let g:ale_echo_msg_format = '[%linter%] [%severity%] %s'
let g:ale_linters = {
      \ 'ruby': ['ruby', 'rubocop', 'reek'],
      \}

" Airline
let g:airline_powerline_fonts=1
let g:airline#extensions#ale#enabled = 1

" BufExplorer
let g:bufExplorerShowRelativePath=1

" CtrlP
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

" EasyMotion
let g:EasyMotion_do_mapping = 0

" NERDTree for gitgutter
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" ==========================================
" Keymapping
"
" NERDTree
nmap <C-\> :NERDTreeFind<CR>
nmap <silent> <Leader><Leader> :NERDTreeToggle<CR>

" Moving between opened windows
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>
nnoremap <silent> <bs> <C-w><Left>

" Move to line
map <Space>ml <Plug>(easymotion-bd-jk)
nmap <Space>Ml <Plug>(easymotion-overwin-line)

" Move to word
map  <Space>mw <Plug>(easymotion-bd-w)
nmap <Space>Mw <Plug>(easymotion-overwin-w)

" JK motions: Line motions
map <Space>j <Plug>(easymotion-j)
map <Space>k <Plug>(easymotion-k)

" ==========================================
" UPPER/lowercase word
"
nmap <Leader>u mQviwU`Q
nmap <Leader>l mQviwu`Q

" ==========================================
" Highlight matches
"
nmap <silent> // :nohlsearch<CR>
noremap ,hl :set hlsearch! hlsearch?<CR>

" ==========================================
" Ctrlp git modified
"
map <Leader>m :CtrlPModified<CR>
map <Leader>M :CtrlPBranch<CR>

" ==========================================
" CtrlSF
"
nmap <C-F>f <Plug>CtrlSFPrompt
vmap <C-F>f <Plug>CtrlSFVwordPath
vmap <C-F>F <Plug>CtrlSFVwordExec
nmap <C-F>n <Plug>CtrlSFCwordPath
nmap <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

" ==========================================
" Vim Fugitive
"
map <Leader>gbl :Gblame<CR>
map <Leader>gbr :Gbrowse<CR>
map <Leader>gd :Gdiff<CR>

" ==========================================
" Vim Test
"
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" ==========================================
" Allows you to enter sudo pass and save the file
" when you forgot to open your file with sudo
"
cmap w!! %!sudo tee > /dev/null null%

" ==========================================
" Allow to copy/paste between VIM instances
" copy the current visual selection to ~/.vbuf
vmap <Leader>y :w! ~/.vbuf<CR>

" copy the current line to the buffer file if no visual selection
nmap <Leader>y :.w! ~/.vbuf<CR>

" paste the contents of the buffer file
nmap <Leader>p :r ~/.vbuf<CR>

" ==========================================
" Autocommands
"
" Common
augroup au_common
  au!

  " Automatically removing all trailing whitespace
  au BufWritePre * :%s/\s\+$//e

  au BufRead,BufNewFile {Capfile,Gemfile,Guardfile,Vagrantfile,*.prawn} set ft=ruby
  au BufRead,BufNewFile {.babelrc,.eslintrc} set ft=json
augroup END

" For ruby filetype
augroup ft_ruby
  au FileType ruby call SyntaxRange#IncludeEx('keepend start="\%(<<[-\~]SQL\>.*\n\)\@<=" end="SQL" containedin=ALL', 'sql')
augroup END

" For slim filetype
augroup ft_slim
  au BufNewFile,BufRead *.slim setlocal filetype=slim
  au BufNewFile,BufRead *.slime setlocal filetype=slim
augroup END

" Identing
augroup set_shift_width
  au!
  au FileType ruby  setl sw=2 sts=2 et
  au FileType eruby setl sw=2 sts=2 et
  au FileType javascript setl sw=2 sts=2 et
  au FileType yaml setl sw=2 sts=2 et
augroup END
